/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminQuizManagerRouteImport } from './routes/admin/quiz-manager'
import { Route as AdminLeaderboardRouteImport } from './routes/admin/leaderboard'
import { Route as AdminFeedManagerRouteImport } from './routes/admin/feed-manager'
import { Route as AdminContestsRouteImport } from './routes/admin/contests'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)
const AdminQuizManagerRoute = AdminQuizManagerRouteImport.update({
  id: '/quiz-manager',
  path: '/quiz-manager',
  getParentRoute: () => AdminRoute,
} as any)
const AdminLeaderboardRoute = AdminLeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminFeedManagerRoute = AdminFeedManagerRouteImport.update({
  id: '/feed-manager',
  path: '/feed-manager',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContestsRoute = AdminContestsRouteImport.update({
  id: '/contests',
  path: '/contests',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/contests': typeof AdminContestsRoute
  '/admin/feed-manager': typeof AdminFeedManagerRoute
  '/admin/leaderboard': typeof AdminLeaderboardRoute
  '/admin/quiz-manager': typeof AdminQuizManagerRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/contests': typeof AdminContestsRoute
  '/admin/feed-manager': typeof AdminFeedManagerRoute
  '/admin/leaderboard': typeof AdminLeaderboardRoute
  '/admin/quiz-manager': typeof AdminQuizManagerRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/contests': typeof AdminContestsRoute
  '/admin/feed-manager': typeof AdminFeedManagerRoute
  '/admin/leaderboard': typeof AdminLeaderboardRoute
  '/admin/quiz-manager': typeof AdminQuizManagerRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/contests'
    | '/admin/feed-manager'
    | '/admin/leaderboard'
    | '/admin/quiz-manager'
    | '/admin/users'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/contests'
    | '/admin/feed-manager'
    | '/admin/leaderboard'
    | '/admin/quiz-manager'
    | '/admin/users'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/contests'
    | '/admin/feed-manager'
    | '/admin/leaderboard'
    | '/admin/quiz-manager'
    | '/admin/users'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/quiz-manager': {
      id: '/admin/quiz-manager'
      path: '/quiz-manager'
      fullPath: '/admin/quiz-manager'
      preLoaderRoute: typeof AdminQuizManagerRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/leaderboard': {
      id: '/admin/leaderboard'
      path: '/leaderboard'
      fullPath: '/admin/leaderboard'
      preLoaderRoute: typeof AdminLeaderboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/feed-manager': {
      id: '/admin/feed-manager'
      path: '/feed-manager'
      fullPath: '/admin/feed-manager'
      preLoaderRoute: typeof AdminFeedManagerRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contests': {
      id: '/admin/contests'
      path: '/contests'
      fullPath: '/admin/contests'
      preLoaderRoute: typeof AdminContestsRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminContestsRoute: typeof AdminContestsRoute
  AdminFeedManagerRoute: typeof AdminFeedManagerRoute
  AdminLeaderboardRoute: typeof AdminLeaderboardRoute
  AdminQuizManagerRoute: typeof AdminQuizManagerRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminContestsRoute: AdminContestsRoute,
  AdminFeedManagerRoute: AdminFeedManagerRoute,
  AdminLeaderboardRoute: AdminLeaderboardRoute,
  AdminQuizManagerRoute: AdminQuizManagerRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
