import * as schema from './schema';

const getRequiredEnv = (key: string): string => {
	const value = process.env[key];
	if (!value) {
		throw new Error(`Missing required environment variable: ${key}`);
	}
	return value;
};

const getRequiredNumberEnv = (key: string): number => {
	const value = getRequiredEnv(key);
	const num = Number(value);
	if (isNaN(num)) {
		throw new Error(`Environment variable ${key} must be a number, got: ${value}`);
	}
	return num;
};

export const SEED_ADMIN = process.env.SEED_ADMIN || '';
export const SEED_USERS = process.env.SEED_USERS?.split(',').map((email) => email.trim()) || [];
export const SEED_USERS_COUNT = getRequiredNumberEnv('SEED_USERS_COUNT');
export const SEED_COLLECTIONS_COUNT_PER_USER = getRequiredNumberEnv('SEED_COLLECTIONS_COUNT_PER_USER');
export const SEED_QUIZZES_COUNT_PER_USER = getRequiredNumberEnv('SEED_QUIZZES_COUNT_PER_USER');
export const SEED_QUESTIONS_PER_QUIZ_COUNT = getRequiredNumberEnv('SEED_QUESTIONS_PER_QUIZ_COUNT');
export const SEED_QUIZ_SNAPSHOTS_COUNT_PER_QUIZ = getRequiredNumberEnv('SEED_QUIZ_SNAPSHOTS_COUNT_PER_QUIZ');
export const SEED_GAME_SESSIONS_COUNT_PER_QUIZ = getRequiredNumberEnv('SEED_GAME_SESSIONS_COUNT_PER_QUIZ');
export const SEED_GAME_PARTICIPANTS_PER_SESSION_COUNT = getRequiredNumberEnv('SEED_GAME_PARTICIPANTS_PER_SESSION_COUNT');
export const SEED_POSTS_COUNT_PER_USER = getRequiredNumberEnv('SEED_POSTS_COUNT_PER_USER');
export const SEED_COMMENTS_COUNT_PER_POST = getRequiredNumberEnv('SEED_COMMENTS_COUNT_PER_POST');
export const SEED_POST_LIKES_COUNT_PER_POST = getRequiredNumberEnv('SEED_POST_LIKES_COUNT_PER_POST');
export const SEED_COMMENT_LIKES_COUNT_PER_COMMENT = getRequiredNumberEnv('SEED_COMMENT_LIKES_COUNT_PER_COMMENT');
export const SEED_FAVORITE_QUIZZES_COUNT_PER_USER = getRequiredNumberEnv('SEED_FAVORITE_QUIZZES_COUNT_PER_USER');
export const SEED_FOLLOWS_COUNT_PER_USER = getRequiredNumberEnv('SEED_FOLLOWS_COUNT_PER_USER');
export const SEED_NOTIFICATIONS_COUNT_PER_POST = getRequiredNumberEnv('SEED_NOTIFICATIONS_COUNT_PER_POST');

export const categories = [
	'Khoa h·ªçc',
	'L·ªãch s·ª≠',
	'ƒê·ªãa l√Ω',
	'To√°n h·ªçc',
	'VƒÉn h·ªçc',
	'C√¥ng ngh·ªá',
	'Th·ªÉ thao',
	'√Çm nh·∫°c',
	'Ngh·ªá thu·∫≠t',
	'Kinh doanh',
];

export const questionTypes: string[] = [
	'single_choice',
	'checkbox',
	'true_false',
	'type_answer',
	'reorder',
	'drop_pin',
];

export const accountTypes = ['user', 'employee'];

export const bios = [
	'ƒêam m√™ quiz v√† gi√°o d·ª•c üìö',
	'H·ªçc c√°i g√¨ c≈©ng th√≠ch üéì',
	'T·∫°o n·ªôi dung gi√°o d·ª•c h·∫•p d·∫´n',
	'Y√™u th√≠ch chia s·∫ª ki·∫øn th·ª©c',
	'L√†m cho h·ªçc t·∫≠p tr·ªü n√™n vui v·∫ª',
	'Gi√°o vi√™n ban ng√†y, t√°c gi·∫£ quiz ban ƒë√™m',
	'X√¢y d·ª±ng tr·∫£i nghi·ªám h·ªçc t·∫≠p t·ªët h∆°n',
	'Ng∆∞·ªùi ·ªßng h·ªô c√¥ng ngh·ªá gi√°o d·ª•c',
];

export const vietnameseNames = [
	'Nguy·ªÖn VƒÉn An', 'Tr·∫ßn Th·ªã B√¨nh', 'L√™ Ho√†ng C∆∞·ªùng', 'Ph·∫°m Th·ªã Dung', 
	'Ho√†ng VƒÉn Em', 'ƒê·∫∑ng Th·ªã Ph∆∞∆°ng', 'V√µ Minh Giang', 'B√πi Th·ªã H∆∞∆°ng',
	'ƒê·ªó VƒÉn H√πng', 'Ng√¥ Th·ªã Lan', 'D∆∞∆°ng VƒÉn Khoa', 'L√Ω Th·ªã Linh',
	'Mai VƒÉn Minh', 'Phan Th·ªã Nga', 'Tr∆∞∆°ng VƒÉn ∆†n', 'H·ªì Th·ªã Ph∆∞·ª£ng',
	'T√¥ VƒÉn Quang', 'ƒêinh Th·ªã Nh∆∞', 'V≈© VƒÉn S∆°n', 'Cao Th·ªã T√¢m',
];

export const notificationTypes = ['like', 'comment', 'follow', 'quiz_share', 'game_invite'];

export const generateQuestionData = (type: string) => {
	const baseData = {
		timeLimit: 15 + Math.floor(Math.random() * 46),
		points: [50, 100, 150][Math.floor(Math.random() * 3)],
		explanation: 'C√¢u h·ªèi n√†y ki·ªÉm tra s·ª± hi·ªÉu bi·∫øt c·ªßa b·∫°n v·ªÅ ch·ªß ƒë·ªÅ.',
	};
	
	switch (type) {
		case 'single_choice':
			return {
				...baseData,
				options: [
					{ text: 'Ph∆∞∆°ng √°n A', isCorrect: false },
					{ text: 'Ph∆∞∆°ng √°n B', isCorrect: true },
					{ text: 'Ph∆∞∆°ng √°n C', isCorrect: false },
					{ text: 'Ph∆∞∆°ng √°n D', isCorrect: false },
				],
			};
		case 'checkbox':
			return {
				...baseData,
				options: [
					{ text: 'Ph∆∞∆°ng √°n A', isCorrect: true },
					{ text: 'Ph∆∞∆°ng √°n B', isCorrect: true },
					{ text: 'Ph∆∞∆°ng √°n C', isCorrect: false },
					{ text: 'Ph∆∞∆°ng √°n D', isCorrect: false },
				],
			};
		case 'true_false':
			return {
				...baseData,
				correctAnswer: Math.random() > 0.5,
			};
		case 'type_answer':
			return {
				...baseData,
				correctAnswer: 'g√µ c√¢u tr·∫£ l·ªùi',
				caseSensitive: false,
			};
		case 'reorder':
			return {
				...baseData,
				items: [
					{ id: 1, text: 'M·ª•c th·ª© nh·∫•t', correctOrder: 0 },
					{ id: 2, text: 'M·ª•c th·ª© hai', correctOrder: 1 },
					{ id: 3, text: 'M·ª•c th·ª© ba', correctOrder: 2 },
				],
			};
		case 'drop_pin':
			return {
				...baseData,
				correctLocation: { lat: 21.0285, lng: 105.8542 }, // Hanoi coordinates
				tolerance: 0.1,
			};
		default:
			return baseData;
	}
};

export const generateQuizTitle = (category: string) => {
	const templates = [
		`B·ªô ƒë·ªÅ ${category} c∆° b·∫£n`,
		`L√†m ch·ªß ${category}`,
		`N·ªÅn t·∫£ng ${category}`,
		`Th·ª≠ th√°ch ${category}`,
		`Nh·∫≠p m√¥n ${category}`,
	];
	return templates[Math.floor(Math.random() * templates.length)];
};

export const generateQuizDescription = (category: string) => {
	const templates = [
		`Ki·ªÉm tra ki·∫øn th·ª©c c·ªët l√µi c·ªßa b·∫°n v·ªÅ ${category} v·ªõi c√°c c√¢u h·ªèi c√¢n b·∫±ng ƒë·ªô kh√≥.`,
		`B·ªô c√¢u h·ªèi ${category} ƒë∆∞·ª£c tuy·ªÉn ch·ªçn gi√∫p b·∫°n luy·ªán t·∫≠p hi·ªáu qu·∫£.`,
		`Kh√°m ph√° c√°c kh√°i ni·ªám ch√≠nh trong ${category} v·ªõi c√°c c√¢u h·ªèi r√µ r√†ng, t·∫≠p trung.`,
		`Trau d·ªìi k·ªπ nƒÉng ${category} c·ªßa b·∫°n v·ªõi b√†i quiz h·∫•p d·∫´n n√†y.`,
	];
	return templates[Math.floor(Math.random() * templates.length)];
};

export const generateQuestionText = (category: string | null, type: string, index: number) => {
	const base = category ?? 'Ki·∫øn th·ª©c chung';
	switch (type) {
		case 'single_choice':
			return `(${index + 1}) C√¢u n√†o ƒë√∫ng v·ªÅ ${base}?`;
		case 'checkbox':
			return `(${index + 1}) Ch·ªçn t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi ƒë√∫ng v·ªÅ ${base}.`;
		case 'true_false':
			return `(${index + 1}) ƒê√∫ng hay Sai: M·ªôt s·ª± th·∫≠t ph·ªï bi·∫øn v·ªÅ ${base}.`;
		case 'type_answer':
			return `(${index + 1}) G√µ thu·∫≠t ng·ªØ ch√≠nh x√°c v·ªÅ ${base}.`;
		case 'reorder':
			return `(${index + 1}) S·∫Øp x·∫øp c√°c b∆∞·ªõc ${base} theo ƒë√∫ng th·ª© t·ª±.`;
		case 'drop_pin':
			return `(${index + 1}) X√°c ƒë·ªãnh v·ªã tr√≠ li√™n quan ƒë·∫øn ${base}.`;
		default:
			return `(${index + 1}) C√¢u h·ªèi v·ªÅ ${base}.`;
	}
};

export interface SeedImageUrls {
	posts: string[];
	quizzes: string[];
	profiles: string[];
}

export const FIXED_USERS: Array<typeof schema.users.$inferInsert> = [
  {
    email: 'nguyen.van.an@quizzy.dev',
    fullName: 'Nguy·ªÖn VƒÉn An',
    username: 'nguyenvanan',
    bio: 'Tuy·ªÉn ch·ªçn c√°c b·ªô quiz ch·∫•t l∆∞·ª£ng cao',
    accountType: 'employee',
    isSetupComplete: true,
    profilePictureUrl: 'https://avatars.githubusercontent.com/u/000001?v=4',
  },
  {
    email: 'tran.thi.binh@quizzy.dev',
    fullName: 'Tr·∫ßn Th·ªã B√¨nh',
    username: 'tranthibinh',
    bio: 'H·ªçc m·ªói ng√†y m·ªôt ch√∫t üìö',
    accountType: 'employee',
    isSetupComplete: true,
    profilePictureUrl: 'https://avatars.githubusercontent.com/u/000002?v=4',
  },
  {
    email: 'le.hoang.cuong@quizzy.dev',
    fullName: 'L√™ Ho√†ng C∆∞·ªùng',
    username: 'lehoangcuong',
    bio: 'L√†m cho h·ªçc t·∫≠p tr·ªü n√™n vui v·∫ª h∆°n',
    accountType: 'employee',
    isSetupComplete: true,
    profilePictureUrl: 'https://avatars.githubusercontent.com/u/000003?v=4',
  },
  {
    email: 'pham.thi.dung@quizzy.dev',
    fullName: 'Ph·∫°m Th·ªã Dung',
    username: 'phamthidung',
    bio: 'ƒêam m√™ quiz v√† gi√°o d·ª•c',
    accountType: 'employee',
    isSetupComplete: true,
    profilePictureUrl: 'https://avatars.githubusercontent.com/u/000004?v=4',
  },
  {
    email: 'hoang.van.em@quizzy.dev',
    fullName: 'Ho√†ng VƒÉn Em',
    username: 'hoangvanem',
    bio: 'T·∫°o n·ªôi dung gi√°o d·ª•c h·∫•p d·∫´n',
    accountType: 'employee',
    isSetupComplete: true,
    profilePictureUrl: 'https://avatars.githubusercontent.com/u/000005?v=4',
  },
  {
    email: 'dang.thi.phuong@quizzy.dev',
    fullName: 'ƒê·∫∑ng Th·ªã Ph∆∞∆°ng',
    username: 'dangthiphuong',
    bio: 'X√¢y d·ª±ng tr·∫£i nghi·ªám h·ªçc t·∫≠p t·ªët h∆°n',
    accountType: 'employee',
    isSetupComplete: true,
    profilePictureUrl: 'https://avatars.githubusercontent.com/u/000006?v=4',
  },
];

export const FIXED_USER_COLLECTIONS = [
  { email: 'nguyen.van.an@quizzy.dev', collections: [
    { title: 'B·ªô ƒë·ªÅ Khoa h·ªçc', description: 'T√†i nguy√™n khoa h·ªçc to√†n di·ªán cho h·ªçc sinh' },
    { title: 'B·ªô s∆∞u t·∫≠p L·ªãch s·ª≠', description: 'C√°c s·ª± ki·ªán v√† d√≤ng th·ªùi gian l·ªãch s·ª≠ th·∫ø gi·ªõi' },
    { title: 'To√°n h·ªçc c∆° b·∫£n', description: 'C√°c kh√°i ni·ªám to√°n h·ªçc c·ªët l√µi v√† b√†i t·∫≠p' }
  ]},
  { email: 'tran.thi.binh@quizzy.dev', collections: [
    { title: 'Y√™u th√≠ch c·ªßa t√¥i', description: 'C√°c quiz t√¥i th√≠ch luy·ªán t·∫≠p' },
    { title: 'Nh√≥m h·ªçc t·∫≠p', description: 'Chia s·∫ª quiz v·ªõi b·∫°n c√πng l·ªõp' }
  ]},
  { email: 'le.hoang.cuong@quizzy.dev', collections: [
    { title: 'B·ªô s∆∞u t·∫≠p VƒÉn h·ªçc', description: 'Nghi√™n c·ª©u vƒÉn h·ªçc c·ªï ƒëi·ªÉn v√† hi·ªán ƒë·∫°i' },
    { title: 'Ngh·ªá thu·∫≠t & √Çm nh·∫°c', description: 'Kh√°m ph√° ngh·ªá thu·∫≠t s√°ng t·∫°o' }
  ]},
  { email: 'pham.thi.dung@quizzy.dev', collections: [
    { title: 'Kinh doanh c∆° b·∫£n', description: 'C√°c kh√°i ni·ªám v√† chi·∫øn l∆∞·ª£c kinh doanh c·ªët l√µi' },
    { title: 'Xu h∆∞·ªõng C√¥ng ngh·ªá', description: 'M·ªõi nh·∫•t v·ªÅ c√¥ng ngh·ªá v√† ƒë·ªïi m·ªõi' }
  ]},
  { email: 'hoang.van.em@quizzy.dev', collections: [
    { title: 'Quiz luy·ªán t·∫≠p', description: 'T√†i li·ªáu luy·ªán t·∫≠p v√† √¥n t·∫≠p h√†ng ng√†y' }
  ]},
  { email: 'dang.thi.phuong@quizzy.dev', collections: [
    { title: 'Ph√°t tri·ªÉn chuy√™n nghi·ªáp', description: 'Ph√°t tri·ªÉn s·ª± nghi·ªáp v√† x√¢y d·ª±ng k·ªπ nƒÉng' },
    { title: 'ƒê√†o t·∫°o K·ªπ nƒÉng', description: 'T√†i nguy√™n ƒë√†o t·∫°o k·ªπ thu·∫≠t th·ª±c h√†nh' }
  ]}
];

export const getRegularUserCounts = (totalUsers: number) => {
	const SEED_COLLECTIONS_COUNT = totalUsers * SEED_COLLECTIONS_COUNT_PER_USER;
	const SEED_QUIZZES_COUNT = totalUsers * SEED_QUIZZES_COUNT_PER_USER;
	const SEED_QUESTIONS_COUNT = SEED_QUIZZES_COUNT * SEED_QUESTIONS_PER_QUIZ_COUNT;
	const SEED_QUIZ_SNAPSHOTS_COUNT = SEED_QUIZZES_COUNT * SEED_QUIZ_SNAPSHOTS_COUNT_PER_QUIZ;
	const SEED_QUESTIONS_SNAPSHOTS_COUNT = SEED_QUIZ_SNAPSHOTS_COUNT * SEED_QUESTIONS_PER_QUIZ_COUNT;
	const SEED_GAME_SESSIONS_COUNT = SEED_QUIZZES_COUNT * SEED_GAME_SESSIONS_COUNT_PER_QUIZ;
	const SEED_GAME_PARTICIPANTS_COUNT = SEED_GAME_SESSIONS_COUNT * SEED_GAME_PARTICIPANTS_PER_SESSION_COUNT;
	const SEED_POSTS_COUNT = totalUsers * SEED_POSTS_COUNT_PER_USER;
	const SEED_POST_LIKES_COUNT = SEED_POSTS_COUNT * SEED_POST_LIKES_COUNT_PER_POST;
	const SEED_FAVORITE_QUIZZES_COUNT = totalUsers * SEED_FAVORITE_QUIZZES_COUNT_PER_USER;
	const SEED_FOLLOWS_COUNT = totalUsers * SEED_FOLLOWS_COUNT_PER_USER;
	
	return {
		users: totalUsers,
		collections: SEED_COLLECTIONS_COUNT,
		quizzes: SEED_QUIZZES_COUNT,
		questions: SEED_QUESTIONS_COUNT,
		quizSnapshots: SEED_QUIZ_SNAPSHOTS_COUNT,
		questionsSnapshots: SEED_QUESTIONS_SNAPSHOTS_COUNT,
		gameSessions: SEED_GAME_SESSIONS_COUNT,
		gameParticipants: SEED_GAME_PARTICIPANTS_COUNT,
		savedQuizzes: SEED_FAVORITE_QUIZZES_COUNT,
		posts: SEED_POSTS_COUNT,
		postLikes: SEED_POST_LIKES_COUNT,
		follows: SEED_FOLLOWS_COUNT,
		notifications: 0,
	};
};
